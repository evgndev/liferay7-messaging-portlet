/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package evgn.dev.messaging.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import evgn.dev.messaging.model.DialogMember;
import evgn.dev.messaging.service.DialogMemberLocalService;
import evgn.dev.messaging.service.persistence.DialogMemberPersistence;
import evgn.dev.messaging.service.persistence.DialogMessagePersistence;
import evgn.dev.messaging.service.persistence.DialogPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dialog member local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link evgn.dev.messaging.service.impl.DialogMemberLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see evgn.dev.messaging.service.impl.DialogMemberLocalServiceImpl
 * @see evgn.dev.messaging.service.DialogMemberLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class DialogMemberLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DialogMemberLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link evgn.dev.messaging.service.DialogMemberLocalServiceUtil} to access the dialog member local service.
	 */

	/**
	 * Adds the dialog member to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dialogMember the dialog member
	 * @return the dialog member that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DialogMember addDialogMember(DialogMember dialogMember) {
		dialogMember.setNew(true);

		return dialogMemberPersistence.update(dialogMember);
	}

	/**
	 * Creates a new dialog member with the primary key. Does not add the dialog member to the database.
	 *
	 * @param dialogMemberId the primary key for the new dialog member
	 * @return the new dialog member
	 */
	@Override
	public DialogMember createDialogMember(long dialogMemberId) {
		return dialogMemberPersistence.create(dialogMemberId);
	}

	/**
	 * Deletes the dialog member with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dialogMemberId the primary key of the dialog member
	 * @return the dialog member that was removed
	 * @throws PortalException if a dialog member with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DialogMember deleteDialogMember(long dialogMemberId)
		throws PortalException {
		return dialogMemberPersistence.remove(dialogMemberId);
	}

	/**
	 * Deletes the dialog member from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dialogMember the dialog member
	 * @return the dialog member that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DialogMember deleteDialogMember(DialogMember dialogMember) {
		return dialogMemberPersistence.remove(dialogMember);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DialogMember.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return dialogMemberPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link evgn.dev.messaging.model.impl.DialogMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return dialogMemberPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link evgn.dev.messaging.model.impl.DialogMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return dialogMemberPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return dialogMemberPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return dialogMemberPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DialogMember fetchDialogMember(long dialogMemberId) {
		return dialogMemberPersistence.fetchByPrimaryKey(dialogMemberId);
	}

	/**
	 * Returns the dialog member with the primary key.
	 *
	 * @param dialogMemberId the primary key of the dialog member
	 * @return the dialog member
	 * @throws PortalException if a dialog member with the primary key could not be found
	 */
	@Override
	public DialogMember getDialogMember(long dialogMemberId)
		throws PortalException {
		return dialogMemberPersistence.findByPrimaryKey(dialogMemberId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(dialogMemberLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DialogMember.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("dialogMemberId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(dialogMemberLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(DialogMember.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"dialogMemberId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(dialogMemberLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DialogMember.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("dialogMemberId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return dialogMemberLocalService.deleteDialogMember((DialogMember)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return dialogMemberPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dialog members.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link evgn.dev.messaging.model.impl.DialogMemberModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dialog members
	 * @param end the upper bound of the range of dialog members (not inclusive)
	 * @return the range of dialog members
	 */
	@Override
	public List<DialogMember> getDialogMembers(int start, int end) {
		return dialogMemberPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dialog members.
	 *
	 * @return the number of dialog members
	 */
	@Override
	public int getDialogMembersCount() {
		return dialogMemberPersistence.countAll();
	}

	/**
	 * Updates the dialog member in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dialogMember the dialog member
	 * @return the dialog member that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DialogMember updateDialogMember(DialogMember dialogMember) {
		return dialogMemberPersistence.update(dialogMember);
	}

	/**
	 * Returns the dialog local service.
	 *
	 * @return the dialog local service
	 */
	public evgn.dev.messaging.service.DialogLocalService getDialogLocalService() {
		return dialogLocalService;
	}

	/**
	 * Sets the dialog local service.
	 *
	 * @param dialogLocalService the dialog local service
	 */
	public void setDialogLocalService(
		evgn.dev.messaging.service.DialogLocalService dialogLocalService) {
		this.dialogLocalService = dialogLocalService;
	}

	/**
	 * Returns the dialog persistence.
	 *
	 * @return the dialog persistence
	 */
	public DialogPersistence getDialogPersistence() {
		return dialogPersistence;
	}

	/**
	 * Sets the dialog persistence.
	 *
	 * @param dialogPersistence the dialog persistence
	 */
	public void setDialogPersistence(DialogPersistence dialogPersistence) {
		this.dialogPersistence = dialogPersistence;
	}

	/**
	 * Returns the dialog member local service.
	 *
	 * @return the dialog member local service
	 */
	public DialogMemberLocalService getDialogMemberLocalService() {
		return dialogMemberLocalService;
	}

	/**
	 * Sets the dialog member local service.
	 *
	 * @param dialogMemberLocalService the dialog member local service
	 */
	public void setDialogMemberLocalService(
		DialogMemberLocalService dialogMemberLocalService) {
		this.dialogMemberLocalService = dialogMemberLocalService;
	}

	/**
	 * Returns the dialog member persistence.
	 *
	 * @return the dialog member persistence
	 */
	public DialogMemberPersistence getDialogMemberPersistence() {
		return dialogMemberPersistence;
	}

	/**
	 * Sets the dialog member persistence.
	 *
	 * @param dialogMemberPersistence the dialog member persistence
	 */
	public void setDialogMemberPersistence(
		DialogMemberPersistence dialogMemberPersistence) {
		this.dialogMemberPersistence = dialogMemberPersistence;
	}

	/**
	 * Returns the dialog message local service.
	 *
	 * @return the dialog message local service
	 */
	public evgn.dev.messaging.service.DialogMessageLocalService getDialogMessageLocalService() {
		return dialogMessageLocalService;
	}

	/**
	 * Sets the dialog message local service.
	 *
	 * @param dialogMessageLocalService the dialog message local service
	 */
	public void setDialogMessageLocalService(
		evgn.dev.messaging.service.DialogMessageLocalService dialogMessageLocalService) {
		this.dialogMessageLocalService = dialogMessageLocalService;
	}

	/**
	 * Returns the dialog message persistence.
	 *
	 * @return the dialog message persistence
	 */
	public DialogMessagePersistence getDialogMessagePersistence() {
		return dialogMessagePersistence;
	}

	/**
	 * Sets the dialog message persistence.
	 *
	 * @param dialogMessagePersistence the dialog message persistence
	 */
	public void setDialogMessagePersistence(
		DialogMessagePersistence dialogMessagePersistence) {
		this.dialogMessagePersistence = dialogMessagePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("evgn.dev.messaging.model.DialogMember",
			dialogMemberLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"evgn.dev.messaging.model.DialogMember");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DialogMemberLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DialogMember.class;
	}

	protected String getModelClassName() {
		return DialogMember.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = dialogMemberPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = evgn.dev.messaging.service.DialogLocalService.class)
	protected evgn.dev.messaging.service.DialogLocalService dialogLocalService;
	@BeanReference(type = DialogPersistence.class)
	protected DialogPersistence dialogPersistence;
	@BeanReference(type = DialogMemberLocalService.class)
	protected DialogMemberLocalService dialogMemberLocalService;
	@BeanReference(type = DialogMemberPersistence.class)
	protected DialogMemberPersistence dialogMemberPersistence;
	@BeanReference(type = evgn.dev.messaging.service.DialogMessageLocalService.class)
	protected evgn.dev.messaging.service.DialogMessageLocalService dialogMessageLocalService;
	@BeanReference(type = DialogMessagePersistence.class)
	protected DialogMessagePersistence dialogMessagePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}