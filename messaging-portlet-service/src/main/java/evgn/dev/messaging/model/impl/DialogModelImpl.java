/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package evgn.dev.messaging.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import evgn.dev.messaging.model.Dialog;
import evgn.dev.messaging.model.DialogModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Dialog service. Represents a row in the &quot;dmsg_Dialog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DialogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DialogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DialogImpl
 * @see Dialog
 * @see DialogModel
 * @generated
 */
@ProviderType
public class DialogModelImpl extends BaseModelImpl<Dialog>
	implements DialogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dialog model instance should use the {@link Dialog} interface instead.
	 */
	public static final String TABLE_NAME = "dmsg_Dialog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dialogId", Types.BIGINT },
			{ "topic", Types.VARCHAR },
			{ "creatorMemberId", Types.BIGINT },
			{ "lastMessageDate", Types.TIMESTAMP },
			{ "lastMessageId", Types.BIGINT },
			{ "disableAnswering", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "creatorUserId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dialogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("topic", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creatorMemberId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastMessageDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastMessageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("disableAnswering", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("creatorUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table dmsg_Dialog (dialogId LONG not null primary key,topic VARCHAR(75) null,creatorMemberId LONG,lastMessageDate DATE null,lastMessageId LONG,disableAnswering BOOLEAN,createDate DATE null,creatorUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table dmsg_Dialog";
	public static final String ORDER_BY_JPQL = " ORDER BY dialog.lastMessageDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY dmsg_Dialog.lastMessageDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(evgn.dev.messaging.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.evgn.dev.messaging.model.Dialog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(evgn.dev.messaging.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.evgn.dev.messaging.model.Dialog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(evgn.dev.messaging.service.util.ServiceProps.get(
				"lock.expiration.time.evgn.dev.messaging.model.Dialog"));

	public DialogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dialogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDialogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dialogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Dialog.class;
	}

	@Override
	public String getModelClassName() {
		return Dialog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dialogId", getDialogId());
		attributes.put("topic", getTopic());
		attributes.put("creatorMemberId", getCreatorMemberId());
		attributes.put("lastMessageDate", getLastMessageDate());
		attributes.put("lastMessageId", getLastMessageId());
		attributes.put("disableAnswering", getDisableAnswering());
		attributes.put("createDate", getCreateDate());
		attributes.put("creatorUserId", getCreatorUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dialogId = (Long)attributes.get("dialogId");

		if (dialogId != null) {
			setDialogId(dialogId);
		}

		String topic = (String)attributes.get("topic");

		if (topic != null) {
			setTopic(topic);
		}

		Long creatorMemberId = (Long)attributes.get("creatorMemberId");

		if (creatorMemberId != null) {
			setCreatorMemberId(creatorMemberId);
		}

		Date lastMessageDate = (Date)attributes.get("lastMessageDate");

		if (lastMessageDate != null) {
			setLastMessageDate(lastMessageDate);
		}

		Long lastMessageId = (Long)attributes.get("lastMessageId");

		if (lastMessageId != null) {
			setLastMessageId(lastMessageId);
		}

		Boolean disableAnswering = (Boolean)attributes.get("disableAnswering");

		if (disableAnswering != null) {
			setDisableAnswering(disableAnswering);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long creatorUserId = (Long)attributes.get("creatorUserId");

		if (creatorUserId != null) {
			setCreatorUserId(creatorUserId);
		}
	}

	@Override
	public long getDialogId() {
		return _dialogId;
	}

	@Override
	public void setDialogId(long dialogId) {
		_dialogId = dialogId;
	}

	@Override
	public String getTopic() {
		if (_topic == null) {
			return StringPool.BLANK;
		}
		else {
			return _topic;
		}
	}

	@Override
	public void setTopic(String topic) {
		_topic = topic;
	}

	@Override
	public long getCreatorMemberId() {
		return _creatorMemberId;
	}

	@Override
	public void setCreatorMemberId(long creatorMemberId) {
		_creatorMemberId = creatorMemberId;
	}

	@Override
	public Date getLastMessageDate() {
		return _lastMessageDate;
	}

	@Override
	public void setLastMessageDate(Date lastMessageDate) {
		_lastMessageDate = lastMessageDate;
	}

	@Override
	public long getLastMessageId() {
		return _lastMessageId;
	}

	@Override
	public void setLastMessageId(long lastMessageId) {
		_lastMessageId = lastMessageId;
	}

	@Override
	public boolean getDisableAnswering() {
		return _disableAnswering;
	}

	@Override
	public boolean isDisableAnswering() {
		return _disableAnswering;
	}

	@Override
	public void setDisableAnswering(boolean disableAnswering) {
		_disableAnswering = disableAnswering;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreatorUserId() {
		return _creatorUserId;
	}

	@Override
	public void setCreatorUserId(long creatorUserId) {
		_creatorUserId = creatorUserId;
	}

	@Override
	public String getCreatorUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getCreatorUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setCreatorUserUuid(String creatorUserUuid) {
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Dialog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Dialog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Dialog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DialogImpl dialogImpl = new DialogImpl();

		dialogImpl.setDialogId(getDialogId());
		dialogImpl.setTopic(getTopic());
		dialogImpl.setCreatorMemberId(getCreatorMemberId());
		dialogImpl.setLastMessageDate(getLastMessageDate());
		dialogImpl.setLastMessageId(getLastMessageId());
		dialogImpl.setDisableAnswering(getDisableAnswering());
		dialogImpl.setCreateDate(getCreateDate());
		dialogImpl.setCreatorUserId(getCreatorUserId());

		dialogImpl.resetOriginalValues();

		return dialogImpl;
	}

	@Override
	public int compareTo(Dialog dialog) {
		int value = 0;

		value = DateUtil.compareTo(getLastMessageDate(),
				dialog.getLastMessageDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Dialog)) {
			return false;
		}

		Dialog dialog = (Dialog)obj;

		long primaryKey = dialog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Dialog> toCacheModel() {
		DialogCacheModel dialogCacheModel = new DialogCacheModel();

		dialogCacheModel.dialogId = getDialogId();

		dialogCacheModel.topic = getTopic();

		String topic = dialogCacheModel.topic;

		if ((topic != null) && (topic.length() == 0)) {
			dialogCacheModel.topic = null;
		}

		dialogCacheModel.creatorMemberId = getCreatorMemberId();

		Date lastMessageDate = getLastMessageDate();

		if (lastMessageDate != null) {
			dialogCacheModel.lastMessageDate = lastMessageDate.getTime();
		}
		else {
			dialogCacheModel.lastMessageDate = Long.MIN_VALUE;
		}

		dialogCacheModel.lastMessageId = getLastMessageId();

		dialogCacheModel.disableAnswering = getDisableAnswering();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dialogCacheModel.createDate = createDate.getTime();
		}
		else {
			dialogCacheModel.createDate = Long.MIN_VALUE;
		}

		dialogCacheModel.creatorUserId = getCreatorUserId();

		return dialogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{dialogId=");
		sb.append(getDialogId());
		sb.append(", topic=");
		sb.append(getTopic());
		sb.append(", creatorMemberId=");
		sb.append(getCreatorMemberId());
		sb.append(", lastMessageDate=");
		sb.append(getLastMessageDate());
		sb.append(", lastMessageId=");
		sb.append(getLastMessageId());
		sb.append(", disableAnswering=");
		sb.append(getDisableAnswering());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", creatorUserId=");
		sb.append(getCreatorUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("evgn.dev.messaging.model.Dialog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dialogId</column-name><column-value><![CDATA[");
		sb.append(getDialogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>topic</column-name><column-value><![CDATA[");
		sb.append(getTopic());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorMemberId</column-name><column-value><![CDATA[");
		sb.append(getCreatorMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastMessageDate</column-name><column-value><![CDATA[");
		sb.append(getLastMessageDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastMessageId</column-name><column-value><![CDATA[");
		sb.append(getLastMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disableAnswering</column-name><column-value><![CDATA[");
		sb.append(getDisableAnswering());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creatorUserId</column-name><column-value><![CDATA[");
		sb.append(getCreatorUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Dialog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Dialog.class
		};
	private long _dialogId;
	private String _topic;
	private long _creatorMemberId;
	private Date _lastMessageDate;
	private long _lastMessageId;
	private boolean _disableAnswering;
	private Date _createDate;
	private long _creatorUserId;
	private Dialog _escapedModel;
}